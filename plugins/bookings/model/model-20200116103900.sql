/*
ts:2020-01-16 10:39:00
*/

INSERT INTO `plugin_reports_reports` (`name`, `sql`, `publish`, `delete`, `report_type`) VALUES ('Bookings Outstanding', 'select \r\n		bookings.booking_id as `Booking Id`,\r\n		bookings.contact_id as `Student Id`,\r\n		CONCAT_WS(\' \', students.first_name, students.last_name) as `Student`,\r\n		ifnull(bookings.bill_payer, bookings.contact_id) as `Payer Id`,\r\n		CONCAT_WS(\' \', ifnull(payers.first_name, students.first_name), ifnull(payers.last_name,students.last_name)) as `Payer`,\r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n		min(timeslots.datetime_start) as `Starts`,\r\n		outstandings.outstanding as `Outstanding`\r\n	from plugin_ib_educate_bookings bookings\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts students on bookings.contact_id = students.id\r\n		left join plugin_contacts3_contacts payers on bookings.bill_payer = payers.id\r\n		inner join \r\n			(select \r\n					transactions.booking_id,\r\n					transactions.id as transaction_id,\r\n					transactions.total as total,\r\n					sum(payments.amount) as paid,\r\n					transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n				from plugin_bookings_transactions transactions\r\n					inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n					left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id\r\n				where transactions.deleted = 0 and payments.deleted = 0 and ttypes.credit = 1 and payments.`status` = 2\r\n				group by transactions.id\r\n				having outstanding > 0\r\n		) outstandings on bookings.booking_id = outstandings.booking_id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (timeslots.datetime_start <= \'{!Before!}\' or \'\' = \'{!Before!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\')\r\n	group by bookings.booking_id\r\n		', '1', '0', 'sql');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`, `value`) VALUES ((select id from plugin_reports_reports where name='Bookings Outstanding' and `delete`=0 limit 1), 'custom', 'Course', 'select id, CONCAT_WS(\' - \' , `code`, title) as course from plugin_courses_courses where deleted=0 order by code');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`) VALUES ((select id from plugin_reports_reports where name='Bookings Outstanding' and `delete`=0 limit 1), 'date', 'Before');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`, `value`) VALUES ((select id from plugin_reports_reports where name='Bookings Outstanding' and `delete`=0 limit 1), 'text', 'Minimum Outstanding', 0);
UPDATE `plugin_reports_reports` SET `sql`='select \r\n		bookings.booking_id as `Booking Id`,\r\n		bookings.contact_id as `Student Id`,\r\n		CONCAT_WS(\' \', students.first_name, students.last_name) as `Student`,\r\n		ifnull(bookings.bill_payer, bookings.contact_id) as `Payer Id`,\r\n		CONCAT_WS(\' \', ifnull(payers.first_name, students.first_name), ifnull(payers.last_name,students.last_name)) as `Payer`,\r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n    bookings.created_date as `Booked Date`,\r\n		min(timeslots.datetime_start) as `Start Date`,\r\n    booking_status.title as `Status`,\r\n		outstandings.outstanding as `Outstanding`\r\n	from plugin_ib_educate_bookings bookings\r\n    inner join plugin_ib_educate_bookings_status booking_status on bookings.booking_status = booking_status.status_id\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts students on bookings.contact_id = students.id\r\n		left join plugin_contacts3_contacts payers on bookings.bill_payer = payers.id\r\n		inner join \r\n			(select \r\n					transactions.booking_id,\r\n					transactions.id as transaction_id,\r\n					transactions.total as total,\r\n					sum(payments.amount) as paid,\r\n					transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n				from plugin_bookings_transactions transactions\r\n					inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n					left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id\r\n				where transactions.deleted = 0 and payments.deleted = 0 and ttypes.credit = 1 and payments.`status` = 2\r\n				group by transactions.id\r\n				having outstanding > 0\r\n		) outstandings on bookings.booking_id = outstandings.booking_id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (timeslots.datetime_start <= \'{!Before!}\' or \'\' = \'{!Before!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\') and (outstandings.outstanding >= \'{!Minimum Outstanding!}\' or \'\' = \'{!Minimum Outstanding!}\')\r\n	group by bookings.booking_id\r\n		' WHERE (`name`='Bookings Outstanding');

INSERT INTO `plugin_reports_reports` (`name`, `sql`, `publish`, `delete`, `report_type`) VALUES ('Course Revenue', 'select \r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n		date_format(schedules.start_date, \'%Y-%M\') as `Starts`,\r\n		sum(outstandings.paid) as `Paid`,\r\n		sum(outstandings.outstanding) as `Outstanding`,\r\n		sum(outstandings.total) as `Total`\r\n	from plugin_ib_educate_bookings bookings\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts students on bookings.contact_id = students.id\r\n		left join plugin_contacts3_contacts payers on bookings.bill_payer = payers.id\r\n		inner join \r\n			(select \r\n					transactions.booking_id,\r\n					transactions.id as transaction_id,\r\n					transactions.total as total,\r\n					sum(payments.amount) as paid,\r\n					transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n				from plugin_bookings_transactions transactions\r\n					inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n					left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id\r\n				where transactions.deleted = 0 and payments.deleted = 0 and ttypes.credit = 1 and payments.`status` = 2\r\n				group by transactions.id\r\n				having outstanding > 0\r\n		) outstandings on bookings.booking_id = outstandings.booking_id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (schedules.start_date <= \'{!Before!}\' or \'\' = \'{!Before!}\') and (schedules.start_date >= \'{!After!}\' or \'\' = \'{!After!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\')\r\n	group by schedules.id, `Starts`\r\n		', '1', '0', 'sql');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`, `value`) VALUES ((select id from plugin_reports_reports where name='Course Revenue' and `delete`=0 limit 1), 'custom', 'Course', 'select id, CONCAT_WS(\' - \' , `code`, title) as course from plugin_courses_courses where deleted=0 order by code');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`) VALUES ((select id from plugin_reports_reports where name='Course Revenue' and `delete`=0 limit 1), 'date', 'After');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`) VALUES ((select id from plugin_reports_reports where name='Course Revenue' and `delete`=0 limit 1), 'date', 'Before');

UPDATE `plugin_reports_reports` SET `sql`='select \r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n		date_format(schedules.start_date, \'%Y-%M\') as `Starts`,\r\n		outstandings.paid as `Paid`,\r\n		outstandings.outstanding as `Outstanding`,\r\n		outstandings.total as `Total`\r\n	from plugin_ib_educate_bookings bookings\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts students on bookings.contact_id = students.id\r\n		left join plugin_contacts3_contacts payers on bookings.bill_payer = payers.id\r\n		inner join \r\n			(select \r\n		ths.schedule_id, sum(outstandings.total) as total, sum(outstandings.paid) as paid, sum(outstandings.outstanding) as outstanding\r\n	from plugin_bookings_transactions_has_schedule  ths\r\n	left join \r\n	(\r\n		select \r\n							transactions.booking_id,\r\n							transactions.id as transaction_id,\r\n							transactions.total as total,\r\n							ifnull(sum(payments.amount),0) as paid,\r\n							transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n						from plugin_bookings_transactions transactions\r\n							inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n							left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id\r\n						where transactions.deleted = 0 and ttypes.credit = 1 and payments.`status` = 2\r\n						group by transactions.id\r\n	) outstandings on ths.transaction_id = outstandings.transaction_id\r\n	where ths.deleted = 0\r\n	group by ths.schedule_id\r\n		) outstandings on schedules.id = outstandings.schedule_id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (schedules.start_date < date_add(\'{!Before!}\', interval 1 day) or \'\' = \'{!Before!}\') and (schedules.start_date >= \'{!After!}\' or \'\' = \'{!After!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\')\r\n	group by schedules.id, `Starts`\r\n		' WHERE (name='Course Revenue');

UPDATE `plugin_reports_reports` SET `sql`='select \r\n		bookings.booking_id as `Booking Id`,\r\n		bookings.contact_id as `Student Id`,\r\n		CONCAT_WS(\' \', students.first_name, students.last_name) as `Student`,\r\n		ifnull(bookings.bill_payer, bookings.contact_id) as `Payer Id`,\r\n		CONCAT_WS(\' \', ifnull(payers.first_name, students.first_name), ifnull(payers.last_name,students.last_name)) as `Payer`,\r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n    bookings.created_date as `Booked Date`,\r\n		min(timeslots.datetime_start) as `Start Date`,\r\n    booking_status.title as `Status`,\r\n		outstandings.outstanding as `Outstanding`\r\n	from plugin_ib_educate_bookings bookings\r\n    inner join plugin_ib_educate_bookings_status booking_status on bookings.booking_status = booking_status.status_id\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts students on bookings.contact_id = students.id\r\n		left join plugin_contacts3_contacts payers on bookings.bill_payer = payers.id\r\n		inner join \r\n			(select \r\n					transactions.booking_id,\r\n					transactions.id as transaction_id,\r\n					transactions.total as total,\r\n					sum(payments.amount) as paid,\r\n					transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n				from plugin_bookings_transactions transactions\r\n					inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n					left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id and payments.deleted = 0  and payments.`status` = 2\r\n				where transactions.deleted = 0 and ttypes.credit = 1\r\n				group by transactions.id\r\n				having outstanding > 0\r\n		) outstandings on bookings.booking_id = outstandings.booking_id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (timeslots.datetime_start < date_add(\'{!Before!}\', interval 1 day) or \'\' = \'{!Before!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\') and (outstandings.outstanding >= \'{!Minimum Outstanding!}\' or \'\' = \'{!Minimum Outstanding!}\')\r\n	group by bookings.booking_id\r\n		' WHERE (name='Bookings Outstanding');

UPDATE `plugin_reports_reports` SET `name`='Deferred Revenue', `sql`='select \r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n		concat_ws(\' \', payers.first_name, payers.last_name) as `Organization`,\r\n		date_format(schedules.start_date, \'%d-%M-%Y\') as `Starts`,\r\n		sum(outstandings.total) as `Total`\r\n	from plugin_ib_educate_bookings bookings\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts contacts on bookings.contact_id = contacts.id\r\n		inner join \r\n			(select \r\n					transactions.booking_id,\r\n          transactions.contact_id,\r\n					transactions.id as transaction_id,\r\n					transactions.total as total,\r\n					sum(payments.amount) as paid,\r\n					transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n				from plugin_bookings_transactions transactions\r\n					inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n					left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id\r\n				where transactions.deleted = 0 and payments.deleted = 0 and ttypes.credit = 1 and payments.`status` = 2\r\n				group by transactions.id\r\n		) outstandings on bookings.booking_id = outstandings.booking_id\r\n		left join plugin_contacts3_contacts payers on outstandings.contact_id = payers.id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (schedules.start_date < date_add(\'{!Before!}\', interval 1 day) or \'\' = \'{!Before!}\') and (schedules.start_date >= \'{!After!}\' or \'\' = \'{!After!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\')\r\n    and (courses.category_id = \'{!Category!}\' or \'\' = \'{!Category!}\')\r\n	group by schedules.id, `Organization`\r\n		' WHERE (name='Course Revenue');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`, `value`) VALUES ((select id from plugin_reports_reports where name='Deferred Revenue' and `delete`=0 limit 1), 'custom', 'Category', 'select id, category from plugin_courses_categories where `delete`=0 order by category');
UPDATE `plugin_reports_reports` SET `sql`='select \r\n		courses.title as `Course`,\r\n		schedules.`name` as `Schedule`,\r\n		if(orgs.id is null, concat_ws(\' \', payers.first_name, payers.last_name), concat_ws(\' \', orgs.first_name, orgs.last_name)) as `Organization`,\r\n		date_format(schedules.start_date, \'%d-%M-%Y\') as `Starts`,\r\n		sum(outstandings.total) as `Total`\r\n	from plugin_ib_educate_bookings bookings\r\n		inner join plugin_ib_educate_booking_items items on bookings.booking_id = items.booking_id\r\n		inner join plugin_courses_schedules_events timeslots on items.period_id = timeslots.id\r\n		inner join plugin_courses_schedules schedules on timeslots.schedule_id = schedules.id\r\n		inner join plugin_courses_courses courses on schedules.course_id = courses.id\r\n		inner join plugin_contacts3_contacts contacts on bookings.contact_id = contacts.id\r\n		inner join \r\n			(select \r\n					transactions.booking_id,\r\n          transactions.contact_id,\r\n					transactions.id as transaction_id,\r\n					transactions.total as total,\r\n					sum(payments.amount) as paid,\r\n					transactions.total - ifnull(sum(payments.amount), 0) as outstanding\r\n				from plugin_bookings_transactions transactions\r\n					inner join plugin_bookings_transactions_types ttypes on transactions.type = ttypes.id\r\n					left join plugin_bookings_transactions_payments payments on transactions.id = payments.transaction_id and payments.deleted = 0 and payments.`status` = 2\r\n				where transactions.deleted = 0 and ttypes.credit = 1\r\n				group by transactions.id\r\n		) outstandings on bookings.booking_id = outstandings.booking_id\r\n		left join plugin_contacts3_contacts payers on outstandings.contact_id = payers.id\r\n    left join plugin_contacts3_relations rels on payers.id = rels.child_id\r\n		left join plugin_contacts3_contacts orgs on rels.parent_id = orgs.id\r\n\r\n	where bookings.`delete` = 0 and items.`delete` = 0 and timeslots.`delete` = 0\r\n		and (schedules.start_date < date_add(\'{!Before!}\', interval 1 day) or \'\' = \'{!Before!}\') and (schedules.start_date >= \'{!After!}\' or \'\' = \'{!After!}\') and (course_id = \'{!Course!}\' or \'\' = \'{!Course!}\')\r\n    and (courses.category_id = \'{!Category!}\' or \'\' = \'{!Category!}\')\r\n	group by schedules.id, `Organization`\r\n		' WHERE (`name`='Deferred Revenue');
