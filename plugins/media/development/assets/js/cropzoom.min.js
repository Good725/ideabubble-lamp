/*
 CropZoom v1.2
 Release Date: April 17, 2010

 Copyright (c) 2010 Gaston Robledo
 */
(function(e)
{
	e.fn.cropzoom = function(t)
	{
		return this.each(function()
						 {
							 function c(e)
							 {
								 if (e.position.top > 0)N("image").posY = 0;
								 if (e.position.left > 0)N("image").posX = 0;
								 var t = -(N("image").h - e.helper.parent().parent().height()), n = -(N("image").w - e.helper.parent().parent().width());
								 if (e.position.top < t)N("image").posY = t;
								 if (e.position.left < n)N("image").posX = n;
								 v()
							 }

							 function h()
							 {
								 var e = a.image.source.split(".");
								 return e[e.length - 1]
							 }

							 function p()
							 {
								 N("image").scaleX = a.width / N("image").w;
								 N("image").scaleY = a.height / N("image").h
							 }

							 function d()
							 {
								 if (a.image.startZoom != 0)
								 {
									 var e = a.image.width * Math.abs(a.image.startZoom) / 100;
									 var t = a.image.height * Math.abs(a.image.startZoom) / 100;
									 N("image").h = t;
									 N("image").w = e;
									 if (N("image").posY != 0 && N("image").posX != 0)
									 {
										 if (N("image").h > a.height)N("image").posY = Math.abs(a.height / 2 - N("image").h / 2);
										 else N("image").posY = a.height / 2 - N("image").h / 2;
										 if (N("image").w > a.width)N("image").posX = Math.abs(a.width / 2 - N("image").w / 2);
										 else N("image").posX = a.width / 2 - N("image").w / 2
									 }
								 }
								 else
								 {
									 var n = N("image").scaleX;
									 var r = N("image").scaleY;
									 if (r < n)
									 {
										 N("image").h = a.height;
										 N("image").w = Math.round(N("image").w * r)
									 }
									 else
									 {
										 N("image").h = Math.round(N("image").h * n);
										 N("image").w = a.width
									 }
								 }
								 if (N("image").w < a.width && N("image").h < a.height)
								 {
									 a.image.snapToContainer = false
								 }
								 v()
							 }

							 function v()
							 {
								 e(function()
								   {
									   C();
									   rotation = "rotate(" + N("image").rotation + "deg)";
									   e(s).css({transform: rotation, "-webkit-transform": rotation, "-ms-transform": rotation, msTransform: rotation, top: N("image").posY, left: N("image").posX})
								   })
							 }

							 function m()
							 {
								 var t = e("<div />").attr("id", "rotationContainer").mouseover(function()
																								{
																									e(this).css("opacity", 1)
																								}).mouseout(function()
																											{
																												e(this).css("opacity", .6)
																											});
								 var r = e("<div />").attr("id", "rotationMin").html("0");
								 var i = e("<div />").attr("id", "rotationMax").html("360");
								 var s = e("<div />").attr("id", "rotationSlider");
								 var o = "vertical";
								 var u = Math.abs(360 - a.image.rotation);
								 if (a.expose.slidersOrientation == "horizontal")
								 {
									 o = "horizontal";
									 u = a.image.rotation
								 }
								 s.slider({orientation: o, value: u, range: "max", min: 0, max: 360, step: a.rotationSteps > 360 || a.rotationSteps < 0 ? 1 : a.rotationSteps, slide: function(e, t)
								 {
									 N("image").rotation = u == 360 ? Math.abs(360 - t.value) : Math.abs(t.value);
									 v();
									 if (a.image.onRotate != null)a.image.onRotate(s, N("image").rotation)
								 }});
								 t.append(r);
								 t.append(s);
								 t.append(i);
								 if (a.expose.rotationElement != "")
								 {
									 s.addClass(a.expose.slidersOrientation);
									 t.addClass(a.expose.slidersOrientation);
									 r.addClass(a.expose.slidersOrientation);
									 i.addClass(a.expose.slidersOrientation);
									 e(a.expose.rotationElement).empty().append(t)
								 }
								 else
								 {
									 s.addClass("vertical");
									 t.addClass("vertical");
									 r.addClass("vertical");
									 i.addClass("vertical");
									 t.css({position: "absolute", top: 5, left: 5, opacity: .6});
									 n.append(t)
								 }
							 }

							 function g()
							 {
								 var t = e("<div />").attr("id", "zoomContainer").mouseover(function()
																							{
																								e(this).css("opacity", 1)
																							}).mouseout(function()
																										{
																											e(this).css("opacity", .6)
																										});
								 var r = e("<div />").attr("id", "zoomMin").html("<b>-</b>");
								 var i = e("<div />").attr("id", "zoomMax").html("<b>+</b>");
								 var o = e("<div />").attr("id", "zoomSlider");
								 o.slider({orientation: a.expose.zoomElement != "" ? a.expose.slidersOrientation : "vertical", value: a.image.startZoom != 0 ? a.image.startZoom : y(N("image")), min: a.image.useStartZoomAsMinZoom ? a.image.startZoom : a.image.minZoom, max: a.image.maxZoom, step: a.zoomSteps > a.image.maxZoom || a.zoomSteps < 0 ? 1 : a.zoomSteps, slide: function(t, n)
								 {
									 var r = a.expose.slidersOrientation == "vertical" ? a.image.maxZoom - n.value : n.value;
									 var i = a.image.width * Math.abs(r) / 100;
									 var o = a.image.height * Math.abs(r) / 100;
									 e(s).css({width: i + "px", height: o + "px"});
									 var u = N("image").w / 2 - i / 2;
									 var f = N("image").h / 2 - o / 2;
									 var l = u > 0 ? N("image").posX + Math.abs(u) : N("image").posX - Math.abs(u);
									 var c = f > 0 ? N("image").posY + Math.abs(f) : N("image").posY - Math.abs(f);
									 N("image").posX = l;
									 N("image").posY = c;
									 N("image").w = i;
									 N("image").h = o;
									 p();
									 v();
									 if (a.image.onZoom != null)
									 {
										 a.image.onZoom(s, N("image"))
									 }
								 }});
								 if (a.slidersOrientation == "vertical")
								 {
									 t.append(i);
									 t.append(o);
									 t.append(r)
								 }
								 else
								 {
									 t.append(r);
									 t.append(o);
									 t.append(i)
								 }
								 if (a.expose.zoomElement != "")
								 {
									 r.addClass(a.expose.slidersOrientation);
									 i.addClass(a.expose.slidersOrientation);
									 o.addClass(a.expose.slidersOrientation);
									 t.addClass(a.expose.slidersOrientation);
									 e(a.expose.zoomElement).empty().append(t)
								 }
								 else
								 {
									 r.addClass("vertical");
									 i.addClass("vertical");
									 o.addClass("vertical");
									 t.addClass("vertical");
									 t.css({position: "absolute", top: 5, right: 5, opacity: .6});
									 n.append(t)
								 }
							 }

							 function y()
							 {
								 var e = 0;
								 if (N("image").w > N("image").h)
								 {
									 e = a.image.maxZoom - N("image").w * 100 / a.image.width
								 }
								 else
								 {
									 e = a.image.maxZoom - N("image").h * 100 / a.image.height
								 }
								 return e
							 }

							 function b()
							 {
								 if (a.selector.centered)
								 {
									 N("selector").y = a.height / 2 - N("selector").h / 2;
									 N("selector").x = a.width / 2 - N("selector").w / 2
								 }
								 i = e("<div/>").attr("id", n[0].id + "_selector").css({width: N("selector").w, height: N("selector").h, top: N("selector").y + "px", left: N("selector").x + "px", border: "1px dashed " + a.selector.borderColor, position: "absolute", cursor: "move"}).mouseover(function()
																																																																									 {
																																																																										 e(this).css({border: "1px dashed " + a.selector.borderColorHover})
																																																																									 }).mouseout(function()
																																																																												 {
																																																																													 e(this).css({border: "1px dashed " + a.selector.borderColor})
																																																																												 });
								 i.draggable({containment: "parent", iframeFix: true, refreshPositions: true, start: draggable_startFix, drag: function(e, t)
								 {
									 draggable_dragFix(e, t);

									 N("selector").x = t.position.left;
									 N("selector").y = t.position.top;
									 S(t);
									 w();
									 if (a.selector.onSelectorDrag != null)a.selector.onSelectorDrag(i, N("selector"))



								 }, stop: function(e, t)
								 {
									 if (a.selector.hideOverlayOnDragAndResize)x();
									 if (a.selector.onSelectorDragStop != null)a.selector.onSelectorDragStop(i, N("selector"))
								 }});
								 i.resizable({aspectRatio: a.selector.aspectRatio, maxHeight: a.selector.maxHeight, maxWidth: a.selector.maxWidth, minHeight: a.selector.h, minWidth: a.selector.w, containment: "parent", resize: function(e, t)
								 {
									 N("selector").w = i.width();
									 N("selector").h = i.height();
									 S(t);
									 w();
									 if (a.selector.onSelectorResize != null)a.selector.onSelectorResize(i, N("selector"))
								 }, stop: function(e, t)
								 {
									 if (a.selector.hideOverlayOnDragAndResize)x();
									 if (a.selector.onSelectorResizeStop != null)a.selector.onSelectorResizeStop(i, N("selector"))
								 }});
								 w(i);
								 n.append(i)
							 }

							 function w()
							 {
								 var t = null;
								 var n = false;
								 if (i.find("#infoSelector").length > 0)
								 {
									 t = i.find("#infoSelector")
								 }
								 else
								 {
									 t = e("<div />").attr("id", "infoSelector").css({position: "absolute", top: 0, left: 0, background: a.selector.bgInfoLayer, opacity: .6, "font-size": a.selector.infoFontSize + "px", "font-family": "Arial", color: a.selector.infoFontColor, width: "100%"})
								 }
								 if (a.selector.showPositionsOnDrag)
								 {
									 t.html("X:" + Math.round(N("selector").x) + "px - Y:" + Math.round(N("selector").y) + "px");
									 n = true
								 }
								 if (a.selector.showDimetionsOnDrag)
								 {
									 if (n)
									 {
										 t.html(t.html() + " | W:" + N("selector").w + "px - H:" + N("selector").h + "px")
									 }
									 else
									 {
										 t.html("W:" + N("selector").w + "px - H:" + N("selector").h + "px")
									 }
								 }
								 i.append(t)
							 }

							 function E()
							 {
								 var t = ["t", "b", "l", "r"];
								 e.each(t, function()
								 {
									 var t = e("<div />").attr("id", this).css({overflow: "hidden", background: a.overlayColor, opacity: .6, position: "absolute", "z-index": 2, visibility: "visible"});
									 n.append(t)
								 })
							 }

							 function S(e)
							 {
								 n.find("#t").css({display: "block", width: a.width, height: e.position.top, left: 0, top: 0});
								 n.find("#b").css({display: "block", width: a.width, height: a.height, top: e.position.top + i.height() + "px", left: 0});
								 n.find("#l").css({display: "block", left: 0, top: e.position.top, width: e.position.left, height: i.height()});
								 n.find("#r").css({display: "block", top: e.position.top, left: e.position.left + i.width() + "px", width: a.width, height: i.height() + "px"})
							 }

							 function x()
							 {
								 n.find("#t").hide();
								 n.find("#b").hide();
								 n.find("#l").hide();
								 n.find("#r").hide()
							 }

							 function T(e, t)
							 {
								 n.data(e, t)
							 }

							 function N(e)
							 {
								 return n.data(e)
							 }

							 function C()
							 {
								 var e = N("image").rotation * Math.PI / 180;
								 var t = Math.sin(e);
								 var n = Math.cos(e);
								 var r = n * N("image").w;
								 var i = t * N("image").w;
								 var s = -t * N("image").h;
								 var o = n * N("image").h;
								 var u = n * N("image").w - t * N("image").h;
								 var a = t * N("image").w + n * N("image").h;
								 var f = Math.min(0, r, s, u);
								 var l = Math.max(0, r, s, u);
								 var c = Math.min(0, i, o, a);
								 var h = Math.max(0, i, o, a);
								 N("image").rotW = l - f;
								 N("image").rotH = h - c;
								 N("image").rotY = c;
								 N("image").rotX = f
							 }

							 function k()
							 {
								 var t = e("<table>                                    <tr>                                    <td></td>                                    <td></td>                                    <td></td>                                    </tr>                                    <tr>                                    <td></td>                                    <td></td>                                    <td></td>                                    </tr>                                    <tr>                                    <td></td>                                    <td></td>                                    <td></td>                                    </tr>                                    </table>");
								 var n = [];
								 n.push(e("<div />").addClass("mvn_no mvn"));
								 n.push(e("<div />").addClass("mvn_n mvn"));
								 n.push(e("<div />").addClass("mvn_ne mvn"));
								 n.push(e("<div />").addClass("mvn_o mvn"));
								 n.push(e("<div />").addClass("mvn_c"));
								 n.push(e("<div />").addClass("mvn_e mvn"));
								 n.push(e("<div />").addClass("mvn_so mvn"));
								 n.push(e("<div />").addClass("mvn_s mvn"));
								 n.push(e("<div />").addClass("mvn_se mvn"));
								 for (var i = 0; i < n.length; i++)
								 {
									 n[i].mousedown(function()
													{
														L(this)
													}).mouseup(function()
															   {
																   clearTimeout(r)
															   }).mouseout(function()
																		   {
																			   clearTimeout(r)
																		   });
									 t.find("td:eq(" + i + ")").append(n[i])
								 }
								 e(a.expose.elementMovement).empty().append(t)
							 }

							 function L(t)
							 {
								 if (e(t).hasClass("mvn_no"))
								 {
									 N("image").posX = N("image").posX - a.expose.movementSteps;
									 N("image").posY = N("image").posY - a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_n"))
								 {
									 N("image").posY = N("image").posY - a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_ne"))
								 {
									 N("image").posX = N("image").posX + a.expose.movementSteps;
									 N("image").posY = N("image").posY - a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_o"))
								 {
									 N("image").posX = N("image").posX - a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_c"))
								 {
									 N("image").posX = a.width / 2 - N("image").w / 2;
									 N("image").posY = a.height / 2 - N("image").h / 2
								 }
								 else if (e(t).hasClass("mvn_e"))
								 {
									 N("image").posX = N("image").posX + a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_so"))
								 {
									 N("image").posX = N("image").posX - a.expose.movementSteps;
									 N("image").posY = N("image").posY + a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_s"))
								 {
									 N("image").posY = N("image").posY + a.expose.movementSteps
								 }
								 else if (e(t).hasClass("mvn_se"))
								 {
									 N("image").posX = N("image").posX + a.expose.movementSteps;
									 N("image").posY = N("image").posY + a.expose.movementSteps
								 }
								 if (a.image.snapToContainer)
								 {
									 if (N("image").posY > 0)
									 {
										 N("image").posY = 0
									 }
									 if (N("image").posX > 0)
									 {
										 N("image").posX = 0
									 }
									 var i = -(N("image").h - n.height());
									 var s = -(N("image").w - n.width());
									 if (N("image").posY < i)
									 {
										 N("image").posY = i
									 }
									 if (N("image").posX < s)
									 {
										 N("image").posX = s
									 }
								 }
								 v();
								 r = setTimeout(function()
												{
													L(t)
												}, 100)
							 }

							 var n = null;
							 var r = null;
							 var i = null;
							 var s = null;
							 var o = null;
							 var u = {width: 500, height: 375, bgColor: "#000", overlayColor: "#000", selector: {x: 0, y: 0, w: 229, h: 100, aspectRatio: false, centered: false, borderColor: "yellow", borderColorHover: "red", bgInfoLayer: "#FFF", infoFontSize: 10, infoFontColor: "blue", showPositionsOnDrag: true, showDimetionsOnDrag: true, maxHeight: null, maxWidth: null, startWithOverlay: false, hideOverlayOnDragAndResize: true, onSelectorDrag: null, onSelectorDragStop: null, onSelectorResize: null, onSelectorResizeStop: null}, image: {source: "", rotation: 0, width: 0, height: 0, minZoom: 10, maxZoom: 150, startZoom: 0, x: 0, y: 0, useStartZoomAsMinZoom: false, snapToContainer: false, onZoom: null, onRotate: null, onImageDrag: null}, enableRotation: true, enableZoom: true, zoomSteps: 1, rotationSteps: 5, expose: {slidersOrientation: "vertical", zoomElement: "", rotationElement: "", elementMovement: "", movementSteps: 5}};
							 var a = e.extend(true, u, t);
							 if (!e.isFunction(e.fn.draggable) || !e.isFunction(e.fn.resizable) || !e.isFunction(e.fn.slider))
							 {
								 alert("You must include ui.draggable, ui.resizable and ui.slider to use cropZoom");
								 return
							 }
							 if (a.image.source == "" || a.image.width == 0 || a.image.height == 0)
							 {
								 alert("You must set the source, witdth and height of the image element");
								 return
							 }
							 n = e(this);
							 T("options", a);
							 n.empty();
							 n.css({width: a.width, height: a.height, "background-color": a.bgColor, overflow: "hidden", position: "relative", border: "2px solid #333"});
							 T("image", {h: a.image.height, w: a.image.width, posY: a.image.y, posX: a.image.x, scaleX: 0, scaleY: 0, rotation: a.image.rotation, source: a.image.source, bounds: [0, 0, 0, 0], id: "image_to_crop_" + n[0].id});
							 p();
							 d();
							 T("selector", {x: a.selector.x, y: a.selector.y, w: a.selector.maxWidth != null ? a.selector.w > a.selector.maxWidth ? a.selector.maxWidth : a.selector.w : a.selector.w, h: a.selector.maxHeight != null ? a.selector.h > a.selector.maxHeight ? a.selector.maxHeight : a.selector.h : a.selector.h});
							 $container = e("<div />").attr("id", "k").css({width: a.width, height: a.height, position: "absolute"});
							 s = e("<img />");
							 s.attr("src", a.image.source);
							 e(s).css({position: "absolute", left: N("image").posX, top: N("image").posY, width: N("image").w, height: N("image").h});
							 var f = h();
							 if (f == "png" || f == "gif")s[0].style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + a.image.source + "',sizingMethod='scale');";
							 $container.append(s);
							 n.append($container);
							 v();
							 e(s).draggable({refreshPositions: true, start: draggable_startFix, drag: function(e, t)
							 {
								 draggable_dragFix(e, t);

								 N("image").posY = t.position.top;
								 N("image").posX = t.position.left;
								 if (a.image.snapToContainer)c(t);
								 else v();
								 if (a.image.onImageDrag != null)a.image.onImageDrag(s);



							 }, stop: function(e, t)
							 {
								 if (a.image.snapToContainer)c(t)
							 }});
							 b();
							 n.find(".ui-icon-gripsmall-diagonal-se").css({background: "#FFF", border: "1px solid #000", width: 8, height: 8});
							 E();
							 if (a.selector.startWithOverlay)
							 {
								 var l = {position: {top: i.position().top, left: i.position().left}};
								 S(l)
							 }
							 if (a.enableZoom)g();
							 if (a.enableRotation)m();
							 if (a.expose.elementMovement != "")k();
							 n.makeOverlayPositions = S;
							 e.fn.cropzoom.updateOverlayPosition = function(e)
							 {
								 n.makeOverlayPositions(e)
							 };
							 e.fn.cropzoom.getParameters = function(t, n)
							 {
								 var r = t.data("image");
								 var i = t.data("selector");
								 var s = {viewPortW: t.width(), viewPortH: t.height(), imageX: r.posX, imageY: r.posY, imageRotate: r.rotation, imageW: r.w, imageH: r.h, imageSource: r.source, selectorX: i.x, selectorY: i.y, selectorW: i.w, selectorH: i.h};
								 return e.extend(s, n)
							 };
							 e.fn.cropzoom.getSelf = function()
							 {
								 return n
							 };
							 return this
						 })
	};
	e.fn.extend({setSelector: function(t, n, r, i, s)
	{
		var o = e(this);
		o.data("selector", {x: t, y: n, w: r, h: i});
		var u = {position: {top: n, left: t}};
		if (s != undefined && s == true)
		{
			o.find("#" + o[0].id + "_selector").animate({top: n, left: t, width: r, height: i}, "slow", function()
			{
				if (o.data("options").selector.startWithOverlay)
				{
					o.cropzoom.updateOverlayPosition(u)
				}
			})
		}
		else
		{
			o.find("#" + o[0].id + "_selector").css({top: n, left: t, width: r, height: i});
			if (e(this).data("options").selector.startWithOverlay)
			{
				o.cropzoom.updateOverlayPosition(u)
			}
		}
	}, restore: function()
	{
		var t = e(this);
		var n = t.data("options");
		t.empty();
		t.data("image", {});
		t.data("selector", {});
		if (n.expose.zoomElement != "")
		{
			e(n.expose.zoomElement).empty()
		}
		if (n.expose.rotationElement != "")
		{
			e(n.expose.rotationElement).empty()
		}
		if (n.expose.elementMovement != "")
		{
			e(n.expose.elementMovement).empty()
		}
		t.cropzoom(n)
	}, send: function(t, n, r, i)
	{
		var s = e(this);
		var o = "";
		e.ajax({url: t, type: n, data: s.cropzoom.getParameters(s, r), success: function(e)
		{
			s.data("imageResult", e);
			if (i !== undefined && i != null)i(e)
		}})
	}})
})(jQuery);
(function(e)
{
	function i(e, t)
	{
		if (e.originalEvent.touches.length > 1)
		{
			return
		}
		e.preventDefault();
		var n = e.originalEvent.changedTouches[0], r = document.createEvent("MouseEvents");
		r.initMouseEvent(t, true, true, window, 1, n.screenX, n.screenY, n.clientX, n.clientY, false, false, false, false, 0, null);
		e.target.dispatchEvent(r)
	}

	e.support.touch = "ontouchend"in document;
	if (!e.support.touch)
	{
		return
	}
	var t = e.ui.mouse.prototype, n = t._mouseInit, r;
	t._touchStart = function(e)
	{
		var t = this;
		if (r || !t._mouseCapture(e.originalEvent.changedTouches[0]))
		{
			return
		}
		r = true;
		t._touchMoved = false;
		i(e, "mouseover");
		i(e, "mousemove");
		i(e, "mousedown")
	};
	t._touchMove = function(e)
	{
		if (!r)
		{
			return
		}
		this._touchMoved = true;
		i(e, "mousemove")
	};
	t._touchEnd = function(e)
	{
		if (!r)
		{
			return
		}
		i(e, "mouseup");
		i(e, "mouseout");
		if (!this._touchMoved)
		{
			i(e, "click")
		}
		r = false
	};
	t._mouseInit = function()
	{
		var t = this;
		t.element.bind("touchstart", e.proxy(t, "_touchStart")).bind("touchmove", e.proxy(t, "_touchMove")).bind("touchend", e.proxy(t, "_touchEnd"));
		n.call(t)
	}

})(jQuery)

function draggable_startFix(event, ui)
{
	ui.position.left = 0;
	ui.position.top = 0;
}

function draggable_dragFix(event, ui)
{
	var zoomScale = .25;
	var changeLeft = ui.position.left - ui.originalPosition.left; // find change in left
	var newLeft = ui.originalPosition.left + changeLeft / zoomScale; // adjust new left by our zoomScale

	var changeTop = ui.position.top - ui.originalPosition.top; // find change in top
	var newTop = ui.originalPosition.top + changeTop / zoomScale; // adjust new top by our zoomScale

	ui.position.left = newLeft;
	ui.position.top = newTop;
}
