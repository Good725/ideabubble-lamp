/*
ts:2017-09-01 11:38:00
*/

UPDATE plugin_reports_reports
  SET `name` = 'Master Roll Call'
  WHERE `name` = 'Roll Call' AND `delete` = 0;

INSERT INTO `plugin_reports_reports`
  (`name`, `sql`, `php_modifier`)
  VALUES
  (
    'Print Roll Call',
    'SELECT \r\n		bk.booking_id AS `Booking ID`,\r\n		CONCAT_WS(\' \', st.title, st.first_name, st.last_name)  AS `Student`, \r\n		IF(st.is_flexi_student, \'Yes\', \'No\') AS `Flexi`,\r\n		\'{!date!}\' AS `Date`\r\n        __PHP1__,\r\n		\'          \' AS `Student Signature`\r\n	FROM plugin_courses_schedules sc\r\n		INNER JOIN plugin_courses_courses co ON sc.course_id = co.id\r\n		INNER JOIN plugin_courses_categories cg ON co.category_id = cg.id\r\n		INNER JOIN plugin_ib_educate_booking_has_schedules bs ON sc.id = bs.schedule_id\r\n		INNER JOIN plugin_ib_educate_bookings bk ON bs.booking_id = bk.booking_id AND bk.`delete` = 0\r\n		INNER JOIN plugin_contacts3_contacts st ON bk.contact_id = st.id\r\n		INNER JOIN plugin_contacts3_residences re ON st.residence = re.address_id\r\n		LEFT JOIN plugin_bookings_transactions_has_schedule ts ON ts.schedule_id = sc.id AND ts.schedule_id = bs.schedule_id AND ts.deleted = 0\r\n		LEFT JOIN plugin_bookings_transactions tx ON bk.booking_id = tx.booking_id AND tx.deleted = 0 AND ts.transaction_id = tx.id\r\n		LEFT JOIN plugin_bookings_transactions_types tt ON tx.type = tt.id AND tt.credit = 1\r\n		\r\n		\r\n		__PHP2__\r\n		LEFT JOIN plugin_bookings_transactions_has_schedule tx_sc ON tx.id = tx_sc.transaction_id AND tx_sc.schedule_id = sc.id\r\n		\r\n	WHERE sc.id = \'{!schedule_id!}\' __PHP3__\r\n	GROUP BY `Booking ID`\r\n	ORDER BY `Student`',
    '\r\n$date = $this->get_parameter(\'date\');\r\n$scheduleId = $this->get_parameter(\'schedule_id\');\r\nif (!is_numeric($scheduleId)){\r\n	$scheduleId = 0;\r\n}\r\n$trainerId = $this->get_parameter(\'trainer_id\');\r\n$schedule = Model_Schedules::get_schedule($scheduleId);\r\n\r\n$eventsQuery = DB::select(\'e.*\')->from(array(\'plugin_courses_schedules_events\', \'e\'))\r\n	->join(array(\'plugin_courses_schedules\', \'s\'), \'inner\')->on(\'e.schedule_id\', \'=\', \'s.id\')\r\n	->where(\'e.schedule_id\', \'=\', $scheduleId)\r\n	->and_where(\'e.delete\', \'=\', 0);\r\n\r\nif ($schedule){\r\n	if (@$schedule[\'payg_period\'] == \'week\') {\r\n		$weekstart = date(\'Y-m-d\', strtotime(\"monday this week\", strtotime($date)));\r\n		$eventsQuery->and_where(\'e.datetime_start\', \'>=\', $weekstart);\r\n		$eventsQuery->and_where(\'e.datetime_start\', \'<\', DB::expr(\'date_add(\"\' . $weekstart . \'\", interval 1 week)\'));\r\n	} else {\r\n		$eventsQuery->and_where(\'e.datetime_start\', \'>=\', $date);\r\n		$eventsQuery->and_where(\'e.datetime_start\', \'<\', DB::expr(\'date_add(\"\' . $date . \'\", interval 1 day)\'));\r\n	}\r\n}\r\n\r\nif (is_numeric($trainerId)) {\r\n	$eventsQuery->and_where(DB::expr(\'if(e.trainer_id > 0, e.trainer_id = \' . $trainerId . \', s.trainer_id = \' . $trainerId . \')\'), \'>\', 0);\r\n}\r\n$events = $eventsQuery->order_by(\'e.datetime_start\', \'asc\')\r\n	->execute()\r\n	->as_array();\r\n\r\nDB::query(null, \'DROP TEMPORARY TABLE IF EXISTS tmp_account_stat\')->execute();\r\nDB::query(null, \'DROP TEMPORARY TABLE IF EXISTS tmp_tx_stat\')->execute();\r\nDB::query(null, \'CREATE TEMPORARY TABLE tmp_tx_stat\r\n(SELECT \r\n		tx.id,\r\n		tx.booking_id,\r\n		tx.total,\r\n		tt.credit,\r\n		SUM(IFNULL(py.amount,0)) AS pyt,\r\n		SUM(IFNULL(IF(ps.credit > 0, py.amount, -py.amount),0)) AS pyx,\r\n		tx.total - SUM(IFNULL(IF(ps.credit > 0, py.amount, -py.amount),0)) AS outstanding\r\n	FROM plugin_bookings_transactions tx\r\n		INNER JOIN plugin_bookings_transactions_has_schedule has ON tx.id = has.transaction_id AND has.schedule_id = \' . $scheduleId . \'\r\n		LEFT JOIN plugin_bookings_transactions_types tt ON tx.type = tt.id\r\n		LEFT JOIN plugin_bookings_transactions_payments py ON tx.id = py.transaction_id AND py.deleted = 0\r\n		LEFT JOIN plugin_bookings_transactions_payments_statuses ps ON py.`status` = ps.id\r\n	GROUP BY tx.id\r\n	HAVING outstanding <> 0)\')->execute();\r\nDB::query(null, \'ALTER TABLE tmp_tx_stat ADD KEY (`booking_id`)\')->execute();\r\nDB::query(null, \'DROP TEMPORARY TABLE IF EXISTS tmp_account_stat\')->execute();\r\nDB::query(null, \'CREATE TEMPORARY TABLE tmp_account_stat\r\n(SELECT \r\n		bk.booking_id, \r\n		SUM(IFNULL(IF(tx.credit > 0, tx.outstanding, -tx.outstanding), 0)) AS outstanding\r\n	FROM plugin_ib_educate_bookings bk\r\n		LEFT JOIN tmp_tx_stat tx ON bk.booking_id = tx.booking_id\r\n	GROUP BY bk.booking_id)\')->execute();\r\nDB::query(null, \'ALTER TABLE tmp_account_stat ADD KEY (`booking_id`)\')->execute();\r\n\r\n$replace1 = \'\';\r\n$replace2 = \'\';\r\n$replace3 = array();\r\nif(count($events) == 0){\r\n    $replace3 = \' and 0 \';\r\n} else {\r\n    $event_count = count($events);\r\n    foreach($events as $i => $event){\r\n        $event_time = strtotime($event[\'datetime_start\']);\r\n        if(date(\'H\', $event_time) == 0){\r\n            $colname = date(\'Y-m-d\', $event_time);\r\n        } else {\r\n            $colname = date(\'H:i\', $event_time);\r\n        }\r\n		if (@$_POST[\'report_format\'] == \'csv\') {\r\n			$replace1 .= \',IF(i\'. $i . \'.attending, i\'. $i . \'.timeslot_status, \\\'Not Attending\\\') as `Time \' . $colname . \'`\';\r\n		} else {\r\n			$replace1 .= \',concat(\\\' <input type=\"checkbox\" name=\"timeslot_status[\\\',bk.booking_id,\\\'][\\\',i\'. $i . \'.booking_item_id,\\\']\" value=\"\\\',ifnull(i\'. $i . \'.timeslot_status, \\\'Present,Paid\\\'),\\\'\" data-attending=\"\\\',i\'. $i . \'.attending,\\\'\" style = \"width:100%\" />\\\') as `Time \' . $colname . \'`\';\r\n		}\r\n        $replace2 .= \'inner join plugin_courses_schedules_events e\'. $i . \' on e\'. $i . \'.id = \' . $event[\'id\'] . \' and e\'. $i . \'.delete = 0 \';\r\n        $replace2 .= \'left join plugin_ib_educate_booking_items i\'. $i . \' on i\'. $i . \'.booking_id = bk.booking_id and i\'. $i . \'.period_id = \' . $event[\'id\'] . \' and i\'. $i . \'.delete = 0 \';\r\n        $replace3[] = \'i\'. $i . \'.period_id is not null\';\r\n    }\r\n\r\n		$replace1 .= \',\\\'                    \\\' as `Notes`\';\r\n	  \r\n		$replace1 .= \',\\\'          \\\' as `Amount Received`\';\r\n	\r\n	$replace2 .= \' left join tmp_account_stat on bk.booking_id = tmp_account_stat.booking_id\';\r\n	if($event_count > 0){\r\n		$replace2 .= \' left join plugin_contacts3_notes n on i0.booking_item_id = n.link_id and n.table_link_id = 3 and n.`deleted` = 0\';\r\n	}\r\n    $replace3 = count($replace3) > 0 ? \' and (\' . implode(\' or \', $replace3) . \') \' : \'\';\r\n}\r\n$sql = $this->_sql;\r\n$sql = str_replace(\'__PHP1__\', $replace1, $sql);\r\n$sql = str_replace(\'__PHP2__\', $replace2, $sql);\r\n$sql = str_replace(\'__PHP3__\', $replace3, $sql);\r\n$this->_sql = $sql;\r\n'
  );

INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`) VALUES ((select id from plugin_reports_reports where `name` = 'Print Roll Call'), 'date', 'date');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`, `value`) VALUES ((select id from plugin_reports_reports where `name` = 'Print Roll Call'), 'custom', 'schedule_id', 'SELECT DISTINCT s.id, CONCAT( s.`name`, \' \', IF(s.payment_type = 1, \'PrePAY\', \'PAYG\')) AS `name`\r\n	FROM plugin_courses_schedules s\r\n		INNER JOIN plugin_courses_schedules_events e ON s.id = e.schedule_id AND e.`delete` = 0 AND s.`delete` = 0\r\n		INNER JOIN plugin_ib_educate_booking_items i ON e.id = i.period_id AND i.`delete` = 0\r\n		INNER JOIN plugin_ib_educate_bookings b ON i.booking_id = b.booking_id AND b.`delete` = 0\r\n	WHERE e.datetime_start >= \'{!date!}\' AND e.datetime_start < DATE_ADD(\'{!date!}\',INTERVAL 1 DAY)\r\n	GROUP BY s.id\r\n	ORDER BY s.`name`');
INSERT INTO `plugin_reports_parameters` (`report_id`, `type`, `name`, `value`) VALUES ((select id from plugin_reports_reports where `name` = 'Print Roll Call'), 'custom', 'trainer_id', 'SELECT DISTINCT t.id, CONCAT_WS(\' \', t.title, t.first_name, t.last_name)\r\n	FROM plugin_courses_schedules s\r\n		INNER JOIN plugin_courses_schedules_events e ON s.id = e.schedule_id\r\n		INNER JOIN plugin_contacts3_contacts t ON t.id = IF(e.trainer_id > 0, e.trainer_id, s.trainer_id)\r\n	WHERE e.datetime_start >= \'{!date!}\' AND e.datetime_start < DATE_ADD(\'{!date!}\',INTERVAL 1 DAY) AND s.id = \'{!schedule_id!}\'\r\n	ORDER BY t.first_name, t.last_name');
